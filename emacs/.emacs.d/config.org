* packages
** melpa
*** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+end_src   
*** ispell
#+begin_src emacs-lisp
  (use-package ispell
    :ensure t)
#+end_src
*** popup-kill-ring
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
*** sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+end_src
*** hungry-delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
*** which-key
 #+begin_src emacs-lisp
 (use-package which-key
   :ensure t
   :init
   (which-key-mode))
 #+end_src
*** avy
 #+begin_src emacs-lisp
   (use-package avy
     :ensure t
     :bind
     ("C-c C-s" . avy-goto-char))
 #+end_src
*** rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode))
#+end_src
** local
*** odin-mode
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/packages/odin-mode.el")
#+end_src
* major mode settings
** org
*** language support
**** setup
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (haskell . t)))

  (setq org-babel-python-command "python3")
#+end_src
**** templates
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
               '("py" . "src python"))
  (add-to-list 'org-structure-template-alist
               '("hs" . "src haskell"))
  (require 'org-tempo)
#+end_src
*** set default buffer to org mode
#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message nil)
#+end_src
*** config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)

  (with-eval-after-load 'org
    (setq org-startup-indented t)
    (add-hook 'org-mode-hook #'visual-line-mode))

  (setq org-latex-tables-centered nil)
#+end_src
*** fancy bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
*** LaTex stuff
#+begin_src emacs-lisp
  (setq org-latex-with-hyperref nil)
  (setq org-latex-pdf-process 
    '("xelatex -interaction nonstopmode %f"
      "xelatex -interaction nonstopmode %f")) ;; for multiple passes

  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass[12pt]{article}
  \\usepackage[T1]{fontenc}
  \\usepackage{fontspec}
  \\usepackage{graphicx}
  \\usepackage{lipsum}
  \\usepackage{geometry}
  \\defaultfontfeatures{Mapping=tex-text}
  \\setromanfont{Gentium}
  \\setromanfont [BoldFont={Gentium Basic Bold},
                  ItalicFont={Gentium Basic Italic}]{Gentium Basic}
  \\setsansfont{Charis SIL}
  \\setmonofont[Scale=0.8]{DejaVu Sans Mono}
  \\geometry{a4paper, textwidth=6.5in, textheight=10in,
              marginparsep=7pt, marginparwidth=.6in}
  \\pagestyle{empty}
  \\author{Nick Celestin Zizic}
        [NO-DEFAULT-PACKAGES]
        [NO-PACKAGES]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

                 ;; beamer class, for presentations
                 '("presentation"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+end_src
** ido
*** enable ido
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

  ;; vertical autocomplete

  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
*** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+end_src
* minor mode settings
** programming modes
*** haskell-mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (menu-bar-mode   -1)
  (tool-bar-mode   -1)
  (scroll-bar-mode -1)

  (column-number-mode)
  (global-subword-mode 1)

  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
#+end_src
* other settings
** spacing and tabs
#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+end_src
** follow symlinks
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** electric pairs
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      ))
  (electric-pair-mode t)
#+end_src
** higlight matching pairs
#+begin_src emacs-lisp
  (require 'paren)
  (setq show-paren-style 'parenthesis)
  (show-paren-mode 1)
#+end_src
** minor settings
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq-default indent-tabs-mode nil)
#+end_src
** reload buffer without confirmation
#+begin_src emacs-lisp
  (setq revert-without-query '(".+"))
#+end_src
* buffer settings
** enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+end_src
** mode specific rebinds
#+begin_src emacs-lisp
;;  (define-key ibuffer-mode-map (kbd "C-k") nil)
#+end_src
** switching buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src
** kill current buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c k") 'kill-current-buffer)
#+end_src
* unsetting and resetting movement keys
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-n"))
  (global-unset-key (kbd "C-p"))
  (global-unset-key (kbd "C-b"))
  (global-unset-key (kbd "C-f"))

  (global-unset-key (kbd "C-h"))
  (global-unset-key (kbd "C-j"))
  (global-unset-key (kbd "C-k"))
  (global-unset-key (kbd "C-l"))

  (global-set-key (kbd "C-h") 'backward-char)
  (global-set-key (kbd "C-j") 'next-line)
  (global-set-key (kbd "C-k") 'previous-line)
  (global-set-key (kbd "C-l") 'forward-char)

  (global-set-key (kbd "C-p") 'eval-print-last-sexp)

  (bind-key "C-d" 'kill-whole-line)

  (unbind-key "C-k" org-mode-map)
  (unbind-key "C-j" lisp-interaction-mode-map)
  (define-key org-mode-map (kbd "C-j") nil)

  (global-set-key (kbd "C-'") 'recenter-top-bottom)
#+end_src
* convenience functions
** reload-config
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** edit-config
 #+begin_src emacs-lisp
   (defun config-edit ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
   (global-set-key (kbd "C-c e") 'config-edit)
 #+end_src
** kill-whole-word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))

  (global-set-key (kbd "C-c C-w") 'kill-whole-word)
#+end_src
** kill-current-buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
** copy-whole-line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c y") 'copy-whole-line)
#+end_src
* auto completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* mode line
** disable minor modes on modeline
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'company-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode))
#+end_src
* fonts
** fira
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fira Code-12"))

  (use-package fira-code-mode
    :ensure t
    :custom (fira-code-mode-disabled-ligatures '("[]" "x"))
    :hook prog-mode)

#+end_src
